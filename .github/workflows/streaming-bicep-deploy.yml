name: streaming-bicep-deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/streaming-bicep/**'
      - '.github/workflows/streaming-bicep-deploy.yml'
  workflow_dispatch:

env:
  RESOURCE_GROUP: rg-nyctaxi-stream
  LOCATION: eastus2
  TEMPLATE_FILE: infra/streaming-bicep/main.bicep
  PARAM_FILE: infra/streaming-bicep/params.dev.json
  ASA_JOB_NAME: asa-nyctaxi-trip
  DATA_LOCALE: en-US
  LATE_SECONDS: 900
  COMPAT_LEVEL: "1.2"
  # Optional alert email for Bicep (set in repo Variables/Secrets if you want)
  ALERT_EMAIL: ${{ vars.ALERT_EMAIL }}
  # Expose subscription id for REST calls and az cli
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

concurrency:
  group: streaming-bicep-deploy
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: streaming-dev

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Who am I (debug)
        uses: azure/cli@v2
        with:
          inlineScript: |
            az account show -o table

      - name: Ensure provider registrations (best-effort)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            for rp in Microsoft.StreamAnalytics Microsoft.EventHub Microsoft.Storage Microsoft.Insights Microsoft.OperationalInsights; do
              az provider register -n "$rp" -o none || true
            done
            # Quick wait to avoid sporadic 409s
            for i in {1..20}; do
              ok=1
              for rp in Microsoft.StreamAnalytics Microsoft.EventHub Microsoft.Storage Microsoft.Insights Microsoft.OperationalInsights; do
                state=$(az provider show -n "$rp" --query registrationState -o tsv || echo "")
                echo "$rp registrationState: ${state}"
                [ "$state" = "Registered" ] || ok=0
              done
              [ $ok -eq 1 ] && break || sleep 3
            done

      - name: Ensure RG exists
        uses: azure/cli@v2
        with:
          inlineScript: |
            az group create -n "$RESOURCE_GROUP" -l "$LOCATION" -o none

      # Ensure ASA job via REST (PUT-first; delete only if all PUT shapes fail)
      - name: Ensure ASA job (REST, idempotent)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail

            put_job () {
              local API="$1"      # e.g. 2021-10-01-preview or 2020-03-01
              local SHAPE="$2"    # "top" or "prop"
              local BODY="/tmp/asa-job.json"

              if [ "$SHAPE" = "top" ]; then
                cat > "$BODY" <<JSON
{
  "location": "$LOCATION",
  "identity": { "type": "SystemAssigned" },
  "sku": { "name": "Standard" },
  "properties": {
    "jobType": "Cloud",
    "eventsOutOfOrderPolicy": "Adjust",
    "eventsOutOfOrderMaxDelayInSeconds": $LATE_SECONDS,
    "eventsLateArrivalMaxDelayInSeconds": $LATE_SECONDS,
    "dataLocale": "$DATA_LOCALE",
    "outputErrorPolicy": "Stop",
    "compatibilityLevel": "$COMPAT_LEVEL"
  }
}
JSON
              else
                cat > "$BODY" <<JSON
{
  "location": "$LOCATION",
  "identity": { "type": "SystemAssigned" },
  "properties": {
    "sku": { "name": "Standard" },
    "jobType": "Cloud",
    "eventsOutOfOrderPolicy": "Adjust",
    "eventsOutOfOrderMaxDelayInSeconds": $LATE_SECONDS,
    "eventsLateArrivalMaxDelayInSeconds": $LATE_SECONDS,
    "dataLocale": "$DATA_LOCALE",
    "outputErrorPolicy": "Stop",
    "compatibilityLevel": "$COMPAT_LEVEL"
  }
}
JSON
              fi

              local URI="https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.StreamAnalytics/streamingjobs/$ASA_JOB_NAME?api-version=$API"
              az rest --method put --uri "$URI" --headers Content-Type=application/json --body @"$BODY" --only-show-errors -o none
            }

            echo "Ensuring ASA job $ASA_JOB_NAME exists/updated..."
            set +e
            put_job 2021-10-01-preview top; rc=$?
            if [ $rc -ne 0 ]; then
              echo "Fallback: 2020-03-01 with top-level sku"
              put_job 2020-03-01 top; rc=$?
            fi
            if [ $rc -ne 0 ]; then
              echo "Fallback: 2020-03-01 with properties.sku"
              put_job 2020-03-01 prop; rc=$?
            fi

            # Only if STILL failing, delete & recreate once
            if [ $rc -ne 0 ]; then
              echo "PUT failed across shapes; deleting and recreating once..."
              az resource delete -g "$RESOURCE_GROUP" -n "$ASA_JOB_NAME" --resource-type Microsoft.StreamAnalytics/streamingjobs
              for i in {1..30}; do
                az resource show -g "$RESOURCE_GROUP" -n "$ASA_JOB_NAME" --resource-type Microsoft.StreamAnalytics/streamingjobs >/dev/null 2>&1 || break
                echo "Waiting for deletion... ($i)"; sleep 5
              done
              put_job 2020-03-01 prop; rc=$?
            fi
            set -e

            [ $rc -eq 0 ] || { echo "Failed to create/update ASA job." >&2; exit 1; }
            echo "ASA job ensured."

      # Wait for the system-assigned identity to be ready so RBAC in Bicep succeeds
      - name: Wait for ASA managed identity (principalId)
        id: mi
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            for i in {1..30}; do
              PID=$(az resource show \
                -g "$RESOURCE_GROUP" \
                -n "$ASA_JOB_NAME" \
                --resource-type Microsoft.StreamAnalytics/streamingjobs \
                --query "identity.principalId" -o tsv || true)
              if [ -n "$PID" ] && [ "$PID" != "None" ]; then
                echo "principalId ready: $PID"
                echo "pid=$PID" >> "$GITHUB_OUTPUT"
                break
              fi
              echo "Waiting for principalId... ($i)"; sleep 5
            done

      # Deploy Bicep (LAW + EH/Storage + Alerts). Incremental = updates in place.
      - name: Deploy Bicep (az cli)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az deployment group create \
              --resource-group "$RESOURCE_GROUP" \
              --name "stream-deploy-${GITHUB_RUN_ID}" \
              --template-file "$TEMPLATE_FILE" \
              --parameters @"$PARAM_FILE" \
              --parameters asaPrincipalId="${{ steps.mi.outputs.pid }}" \
                           asaJobName="$ASA_JOB_NAME" \
                           alertEmail="${ALERT_EMAIL:-you@example.com}" \
              --mode Incremental \
              --only-show-errors

      # Stop ASA job after deploy to avoid runtime costs
      - name: Stop ASA job (cost-safe)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            JOB_URI="https://management.azure.com/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP}/providers/Microsoft.StreamAnalytics/streamingjobs/${ASA_JOB_NAME}"
            API="2021-10-01-preview"
            STATE=$(az rest --method get --uri "${JOB_URI}?api-version=${API}" --query "properties.jobState" -o tsv 2>/dev/null || echo "")
            echo "ASA job state: ${STATE:-<unknown>}"
            case "$STATE" in
              Created|"") echo "Job state '$STATE' -> stop not applicable. Skipping." ;;
              Idle|Processing|Degraded|Starting|Restarting|Scaling)
                echo "Stopping job..."
                az rest --method post --uri "${JOB_URI}/stop?api-version=${API}" -o none || true ;;
              *) echo "Unexpected state '$STATE'; skipping stop." ;;
            esac

      # Wire ASA (inputs/outputs/query) and start it
      - name: Wire ASA (inputs/outputs/query) and start it
        uses: azure/cli@v2
        env:
          RG: ${{ env.RESOURCE_GROUP }}
          ASA: ${{ env.ASA_JOB_NAME }}
          EH_NS: nyctaxi-ehns
          EH_NAME: trips
          SA: nyctaxistreamsa001
          CONTAINER: streaming
        with:
          inlineScript: |
            set -euo pipefail
            bash infra/scripts/asa-wire.sh "$RG" "$ASA" "$EH_NS" "$EH_NAME" "$SA" "$CONTAINER"

      # Verify the storage container exists (debug)
      - name: List storage containers (debug)
        uses: azure/cli@v2
        env:
          SA: ${{ env.SA }}  # leave optional; step safely skips if unset
        with:
          inlineScript: |
            set -euo pipefail
            if [ -z "${SA:-}" ]; then
              echo "SA env var not set; skipping debug." ; exit 0
            fi
            KEY=$(az storage account keys list -g "$RESOURCE_GROUP" -n "$SA" --query '[0].value' -o tsv)
            az storage container list --account-name "$SA" --account-key "$KEY" -o table
