name: streaming-bicep-deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/streaming-bicep/**'
      - '.github/workflows/streaming-bicep-deploy.yml'
  workflow_dispatch:

env:
  RESOURCE_GROUP: rg-nyctaxi-stream
  LOCATION: eastus2
  TEMPLATE_FILE: infra/streaming-bicep/main.bicep
  PARAM_FILE: infra/streaming-bicep/params.dev.json
  COMPILED_JSON: infra/streaming-bicep/compiled.arm.json
  ASA_JOB_NAME: asa-nyctaxi-trip
  # Used by ARM body below (tweak if you need different values)
  DATA_LOCALE: en-US
  LATE_SECONDS: "900"
  COMPAT_LEVEL: "1.2"

concurrency:
  group: streaming-bicep-deploy
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: streaming-dev

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Who am I (debug)
        uses: azure/cli@v2
        with:
          inlineScript: |
            az account show -o table

      - name: Ensure RG exists
        uses: azure/cli@v2
        with:
          inlineScript: |
            az group create -n "$RESOURCE_GROUP" -l "$LOCATION"

      # Clean slate: delete an existing ASA job via generic ARM (no extension)
      - name: Delete existing ASA job if present (ARM)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            if az resource show -g "$RESOURCE_GROUP" -n "$ASA_JOB_NAME" --resource-type Microsoft.StreamAnalytics/streamingjobs >/dev/null 2>&1; then
              echo "Existing ASA job found; deleting..."
              az resource delete -g "$RESOURCE_GROUP" -n "$ASA_JOB_NAME" --resource-type Microsoft.StreamAnalytics/streamingjobs
              # Wait until it’s really gone
              for i in {1..30}; do
                if az resource show -g "$RESOURCE_GROUP" -n "$ASA_JOB_NAME" --resource-type Microsoft.StreamAnalytics/streamingjobs >/dev/null 2>&1; then
                  echo "Waiting for deletion... ($i)"
                  sleep 5
                else
                  echo "ASA job deleted."
                  break
                fi
              done
            else
              echo "No existing ASA job."
            fi

      # Create the ASA job by calling the ARM REST API (sends sku explicitly)
      - name: Create ASA job (ARM via az rest)
        uses: azure/cli@v2
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        with:
          inlineScript: |
            set -e
            URI="https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.StreamAnalytics/streamingjobs/$ASA_JOB_NAME?api-version=2020-03-01"
            cat > /tmp/asa-job.json <<EOF
            {
              "location": "$LOCATION",
              "identity": { "type": "SystemAssigned" },
              "sku": { "name": "Standard" },
              "properties": {
                "jobType": "Cloud",
                "eventsOutOfOrderPolicy": "Adjust",
                "eventsOutOfOrderMaxDelayInSeconds": $LATE_SECONDS,
                "eventsLateArrivalMaxDelayInSeconds": $LATE_SECONDS,
                "dataLocale": "$DATA_LOCALE",
                "outputErrorPolicy": "Stop",
                "compatibilityLevel": "$COMPAT_LEVEL"
              }
            }
            EOF
            echo "Creating ASA job $ASA_JOB_NAME ..."
            az rest --method put --uri "$URI" --body @/tmp/asa-job.json --output none
            echo "ASA job created."

      # Wait for the MSI principal to exist (RBAC in ARM needs the AAD object)
      - name: Wait for ASA MSI principalId
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            for i in {1..36}; do  # up to ~3 minutes
              PID=$(az resource show -g "$RESOURCE_GROUP" -n "$ASA_JOB_NAME" --resource-type Microsoft.StreamAnalytics/streamingjobs --query identity.principalId -o tsv 2>/dev/null || true)
              if [ -n "$PID" ] && [ "$PID" != "None" ]; then
                echo "MSI principalId ready: $PID"
                break
              fi
              echo "Waiting for MSI principalId... ($i)"
              sleep 5
            done

      # Build Bicep -> JSON and ensure the ASA job is NOT in the template
      - name: Compile Bicep to ARM JSON
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            az bicep install || true
            az bicep build --file "$TEMPLATE_FILE" --stdout > "$COMPILED_JSON"
            echo "Compiled: $COMPILED_JSON"

      - name: Guard — compiled template must not create ASA job
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            if command -v jq >/dev/null 2>&1; then
              HAS_JOB=$(jq 'any(.resources[]?; .type=="Microsoft.StreamAnalytics/streamingjobs")' "$COMPILED_JSON")
              if [ "$HAS_JOB" = "true" ]; then
                echo "::error::Your compiled template still defines Microsoft.StreamAnalytics/streamingjobs. Mark it as 'existing' in Bicep."
                exit 1
              fi
            else
              if grep -q '"Microsoft.StreamAnalytics/streamingjobs"' "$COMPILED_JSON"; then
                echo "::error::Your compiled template still defines Microsoft.StreamAnalytics/streamingjobs. Mark it as 'existing' in Bicep."
                exit 1
              fi
            fi
            echo "OK: No streamingjobs resource found in compiled template."

      # Deploy the rest (inputs/outputs/transformations, RBAC, EH, Storage, etc.)
      - name: Deploy compiled ARM template (incremental)
        uses: azure/arm-deploy@v2
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ${{ env.COMPILED_JSON }}
          parameters: ${{ env.PARAM_FILE }}
          deploymentName: stream-deploy-${{ github.run_id }}
          failOnStdErr: false

      # Optional: stop the ASA job to avoid runtime charges (REST)
      - name: Stop ASA job (cost-safe)
        if: always()
        uses: azure/cli@v2
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        with:
          inlineScript: |
            set -e
            URI="https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.StreamAnalytics/streamingjobs/$ASA_JOB_NAME/stop?api-version=2020-03-01"
            az rest --method post --uri "$URI" --output none || true
