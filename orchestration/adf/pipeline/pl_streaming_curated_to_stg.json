{
	"name": "pl_streaming_curated_to_stg",
	"properties": {
		"activities": [
			{
				"name": "ForEachFile",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "IfHourExists",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('files')",
						"type": "Expression"
					},
					"batchCount": 4,
					"activities": [
						{
							"name": "DeleteExisting",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[stg].[usp_delete_trips_by_blob]",
								"storedProcedureParameters": {
									"blobPath": {
										"value": {
											"value": "@concat('streaming-curated/', variables('hourPath'), '/', item())",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_syn_sql",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "CopyCuratedToStg",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "DeleteExisting",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"additionalColumns": [
										{
											"name": "_runId",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										},
										{
											"name": "_blobPath",
											"value": {
												"value": "@concat('streaming-curated/', variables('hourPath'), '/', item())",
												"type": "Expression"
											}
										},
										{
											"name": "_ingestedAt",
											"value": "@utcnow()"
										}
									],
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": false,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings",
										"skipLineCount": 1
									}
								},
								"sink": {
									"type": "SqlDWSink",
									"writeBehavior": "Insert",
									"sqlWriterUseTableLock": false
								},
								"enableStaging": true,
								"stagingSettings": {
									"linkedServiceName": {
										"referenceName": "ls_storage_curated",
										"type": "LinkedServiceReference"
									},
									"path": "adf-staging"
								},
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"type": "String",
												"ordinal": 1
											},
											"sink": {
												"name": "schemaVersion",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 2
											},
											"sink": {
												"name": "eventId",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 3
											},
											"sink": {
												"name": "tpepPickupDatetime",
												"type": "DateTime",
												"physicalType": "datetime2"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 4
											},
											"sink": {
												"name": "tpepDropoffDatetime",
												"type": "DateTime",
												"physicalType": "datetime2"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 5
											},
											"sink": {
												"name": "vendorId",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 6
											},
											"sink": {
												"name": "passengerCount",
												"type": "Int64",
												"physicalType": "bigint"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 7
											},
											"sink": {
												"name": "tripDistance",
												"type": "Double",
												"physicalType": "float"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 8
											},
											"sink": {
												"name": "puLocationId",
												"type": "Int64",
												"physicalType": "bigint"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 9
											},
											"sink": {
												"name": "doLocationId",
												"type": "Int64",
												"physicalType": "bigint"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 10
											},
											"sink": {
												"name": "fareAmount",
												"type": "Double",
												"physicalType": "float"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 11
											},
											"sink": {
												"name": "tipAmount",
												"type": "Double",
												"physicalType": "float"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 12
											},
											"sink": {
												"name": "tollsAmount",
												"type": "Double",
												"physicalType": "float"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 13
											},
											"sink": {
												"name": "improvementSurcharge",
												"type": "Double",
												"physicalType": "float"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 14
											},
											"sink": {
												"name": "mtaTax",
												"type": "Double",
												"physicalType": "float"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 15
											},
											"sink": {
												"name": "extra",
												"type": "Double",
												"physicalType": "float"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 16
											},
											"sink": {
												"name": "totalAmount",
												"type": "Double",
												"physicalType": "float"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 17
											},
											"sink": {
												"name": "paymentType",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 18
											},
											"sink": {
												"name": "source",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 19
											},
											"sink": {
												"name": "producerTs",
												"type": "DateTime",
												"physicalType": "datetime2"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 20
											},
											"sink": {
												"name": "enqueuedTs",
												"type": "DateTime",
												"physicalType": "datetime2"
											}
										},
										{
											"source": {
												"type": "String",
												"ordinal": 21
											},
											"sink": {
												"name": "durationMin",
												"type": "Int32",
												"physicalType": "int"
											}
										},
										{
											"source": {
												"name": "_runId",
												"type": "String"
											},
											"sink": {
												"name": "_runId",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "_blobPath",
												"type": "String"
											},
											"sink": {
												"name": "_blobPath",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "_ingestedAt",
												"type": "String"
											},
											"sink": {
												"name": "_ingestedAt",
												"type": "DateTime",
												"physicalType": "datetime2"
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_curated_csv",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ds_trips_stg",
									"type": "DatasetReference"
								}
							]
						},
						{
							"name": "LogSuccess",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyCuratedToStg",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[stg].[usp_log_ingest]",
								"storedProcedureParameters": {
									"blobPath": {
										"value": {
											"value": "@concat('streaming-curated/', variables('hourPath'), '/', item())",
											"type": "Expression"
										},
										"type": "String"
									},
									"message": {
										"value": " ",
										"type": "String"
									},
									"rowsCopied": {
										"value": {
											"value": "@coalesce(activity('CopyCuratedToStg').output.rowsCopied, 0)",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"runId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									},
									"status": {
										"value": "Success",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_syn_sql",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "LogFailure",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyCuratedToStg",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[stg].[usp_log_ingest]",
								"storedProcedureParameters": {
									"blobPath": {
										"value": {
											"value": "@concat('streaming-curated/', variables('hourPath'), '/', item())",
											"type": "Expression"
										},
										"type": "String"
									},
									"message": {
										"value": {
											"value": "@string(activity('CopyCuratedToStg').error.message)",
											"type": "Expression"
										},
										"type": "String"
									},
									"rowsCopied": {
										"value": "0",
										"type": "Int64"
									},
									"runId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									},
									"status": {
										"value": "Failure",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_syn_sql",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "LogDeleteFailure",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "DeleteExisting",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[stg].[usp_log_ingest]",
								"storedProcedureParameters": {
									"blobPath": {
										"value": {
											"value": "@concat('streaming-curated/', variables('hourPath'), '/', item())",
											"type": "Expression"
										},
										"type": "String"
									},
									"message": {
										"value": {
											"value": "@string(activity('DeleteExisting').error.message)",
											"type": "Expression"
										},
										"type": "String"
									},
									"rowsCopied": {
										"value": "0",
										"type": "Int64"
									},
									"runId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									},
									"status": {
										"value": "Failure",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_syn_sql",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "SetHourPath",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "hourPath",
					"value": {
						"value": "@concat(\n  'date=',\n  formatDateTime(utcnow(),'yyyy'), '/',\n  formatDateTime(utcnow(),'MM'), '/',\n  formatDateTime(utcnow(),'dd'), '/',\n  formatDateTime(utcnow(),'HH')\n)\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "CheckHourFolder",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "SetHourPath",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_curated_folder",
						"type": "DatasetReference",
						"parameters": {
							"dir": "@variables('hourPath')"
						}
					},
					"fieldList": [
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "IfHourExists",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "CheckHourFolder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('CheckHourFolder').output.exists, true)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SetFilesEmpty",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "files",
								"value": [
									"@json('[]')"
								]
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "GetFiles",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "ds_curated_folder",
									"type": "DatasetReference",
									"parameters": {
										"dir": "@variables('hourPath')"
									}
								},
								"fieldList": [
									"childItems"
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "SetFiles",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetFiles",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "files",
								"value": {
									"value": "@coalesce(activity('GetFiles').output.childItems, json('[]'))",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "BuildSliceFromStaging",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "ForEachFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[core].[usp_build_trip_clean_slice_streaming]",
					"storedProcedureParameters": {
						"runId": {
							"value": "@pipeline().RunId",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "UpsertCleanFromSlice",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "BuildSliceFromStaging",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[core].[usp_upsert_trip_clean_from_slice_streaming]",
					"storedProcedureParameters": {
						"runId": {
							"value": "@pipeline().RunId",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "UpsertDimsFromSlice",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "UpsertCleanFromSlice",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[mdl].[usp_upsert_dims_from_slice_streaming]",
					"storedProcedureParameters": {
						"runId": {
							"value": "@pipeline().RunId",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "UpsertFactFromSlice",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "UpsertDimsFromSlice",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[mdl].[usp_upsert_fact_trip_streaming]",
					"storedProcedureParameters": {
						"runId": {
							"value": "@pipeline().RunId",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "PurgeOldSlice",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "UpsertFactFromSlice",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[core].[usp_purge_trip_clean_slice]",
					"storedProcedureParameters": {
						"keepDays": {
							"value": "14",
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LogSuccess_copy1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "PurgeOldSlice",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[stg].[usp_log_ingest]",
					"storedProcedureParameters": {
						"blobPath": {
							"value": {
								"value": "@concat('streaming-curated/', variables('hourPath'), '/', item())",
								"type": "Expression"
							},
							"type": "String"
						},
						"message": {
							"value": " ",
							"type": "String"
						},
						"rowsCopied": {
							"value": {
								"value": "@coalesce(activity('CopyCuratedToStg').output.rowsCopied, 0)",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"runId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"status": {
							"value": "Success",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LogFailure_copy1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "PurgeOldSlice",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[stg].[usp_log_ingest]",
					"storedProcedureParameters": {
						"blobPath": {
							"value": {
								"value": "@concat('streaming-curated/', variables('hourPath'), '/', item())",
								"type": "Expression"
							},
							"type": "String"
						},
						"message": {
							"value": {
								"value": "@string(activity('CopyCuratedToStg').error.message)",
								"type": "Expression"
							},
							"type": "String"
						},
						"rowsCopied": {
							"value": "0",
							"type": "Int64"
						},
						"runId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"status": {
							"value": "Failure",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"curatedContainer": {
				"type": "string",
				"defaultValue": "streaming-curated"
			},
			"curatedPrefix": {
				"type": "string",
				"defaultValue": "streaming-curated"
			},
			"processMode": {
				"type": "string",
				"defaultValue": "lastHour"
			}
		},
		"variables": {
			"year": {
				"type": "String"
			},
			"month": {
				"type": "String"
			},
			"day": {
				"type": "String"
			},
			"hour": {
				"type": "String"
			},
			"hourPath": {
				"type": "String"
			},
			"files": {
				"type": "Array"
			}
		},
		"annotations": []
	}
}