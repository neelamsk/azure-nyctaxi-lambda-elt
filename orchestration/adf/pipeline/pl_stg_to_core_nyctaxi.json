{
	"name": "pl_stg_to_core_nyctaxi",
	"properties": {
		"activities": [
			{
				"name": "LogStart",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "DECLARE @run_id   NVARCHAR(64)  = '@{pipeline().RunId}';\nDECLARE @stage    NVARCHAR(32)  = 'stg_to_core';\nDECLARE @dataset  NVARCHAR(128) = '@{pipeline().parameters.dataset}';\nDECLARE @ingest   DATE          = '@{pipeline().parameters.run_date}';\n\nINSERT INTO ops.run_log (run_id, stage, dataset, ingest_date, status, started_at_utc)\nVALUES (@run_id, @stage, @dataset, @ingest, 'STARTED', SYSUTCDATETIME());\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "BuildSlice_CTAS",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "LogStart",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "\n-- Build a cleaned \"slice\" for a specific ingest_date using CTAS.\n-- Reruns: drop the slice table and rebuild.\n\nDECLARE @ingest_date DATE = '@{pipeline().parameters.run_date}';\nIF OBJECT_ID('core.trip_clean_slice') IS NOT NULL\n  DROP TABLE core.trip_clean_slice;\n\nCREATE TABLE core.trip_clean_slice\nWITH (\n  DISTRIBUTION = HASH (trip_id),\n  CLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT\n  UPPER(NULLIF(LTRIM(RTRIM(s.vendor_id)), ''))                    AS vendor_code,\n  TRY_CAST(s.trip_id AS BIGINT)                                   AS trip_id,\n\n  TRY_CONVERT(DATETIME2, s.pickup_datetime)                       AS pickup_ts_utc,\n  TRY_CONVERT(DATETIME2, s.dropoff_datetime)                      AS dropoff_ts_utc,\n\n  CASE \n    WHEN TRY_CAST(s.trip_distance AS FLOAT) IS NULL THEN NULL\n    ELSE ROUND(TRY_CAST(s.trip_distance AS FLOAT) * 1.609344, 3)\n  END                                                             AS trip_distance_km,\n\n  TRY_CAST(s.fare_amount AS DECIMAL(9,2))                         AS fare_amount,\n\n  COALESCE(rp.payment_type_std,\n           CASE\n             WHEN TRY_CAST(s.payment_type AS INT) = 1 THEN 'CARD'\n             WHEN TRY_CAST(s.payment_type AS INT) = 2 THEN 'CASH'\n             WHEN TRY_CAST(s.payment_type AS INT) = 3 THEN 'NO_CHARGE'\n             WHEN TRY_CAST(s.payment_type AS INT) = 4 THEN 'DISPUTE'\n           END)                                                   AS payment_type,\n\n  CASE \n    WHEN TRY_CONVERT(DATETIME2, s.pickup_datetime) IS NOT NULL\n     AND (DATEPART(HOUR, TRY_CONVERT(DATETIME2, s.pickup_datetime)) BETWEEN 22 AND 23\n          OR DATEPART(HOUR, TRY_CONVERT(DATETIME2, s.pickup_datetime)) BETWEEN 0 AND 5)\n    THEN 1 ELSE 0\n  END                                                             AS is_night_ride,\n\n  s.ingest_date,\n  s.source_file_name,\n  s.loaded_at\nFROM stg.trip AS s\nLEFT JOIN ref.payment_type_map rp\n  ON NULLIF(LTRIM(RTRIM(s.payment_type)), '') = rp.payment_type_src\nWHERE s.ingest_date = @ingest_date\n  AND TRY_CONVERT(DATETIME2, s.pickup_datetime) IS NOT NULL\n  AND TRY_CONVERT(DATETIME2, s.dropoff_datetime) IS NOT NULL\n  AND TRY_CONVERT(DATETIME2, s.pickup_datetime) <= TRY_CONVERT(DATETIME2, s.dropoff_datetime)\n  AND TRY_CAST(s.fare_amount AS DECIMAL(9,2)) >= 0\n  AND TRY_CAST(s.trip_distance AS FLOAT) >= 0;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Quarantine_Rejected",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "BuildSlice_CTAS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "-- Capture rejects that fail basic domain checks into err.trip.\nDECLARE @ingest_date DATE = '@{pipeline().parameters.run_date}';\n\nINSERT INTO err.trip (ingest_date, source_file_name, loaded_at, reject_reason, raw_payload)\nSELECT\n  s.ingest_date,\n  s.source_file_name,\n  s.loaded_at,\n  CASE\n    WHEN TRY_CAST(s.fare_amount AS DECIMAL(9,2)) < 0 THEN 'NEGATIVE_FARE'\n    WHEN TRY_CAST(s.trip_distance AS FLOAT) < 0 THEN 'NEGATIVE_DISTANCE'\n    WHEN TRY_CONVERT(DATETIME2, s.pickup_datetime) > TRY_CONVERT(DATETIME2, s.dropoff_datetime) THEN 'PICKUP_AFTER_DROPOFF'\n    ELSE 'OTHER_BAD_VALUES'\n  END,\n  s._full_json   -- if you staged a raw JSON column; otherwise replace with a concatenation of columns\nFROM stg.trip s\nWHERE s.ingest_date = @ingest_date\n  AND (\n       TRY_CAST(s.fare_amount AS DECIMAL(9,2)) < 0 OR\n       TRY_CAST(s.trip_distance AS FLOAT) < 0 OR\n       TRY_CONVERT(DATETIME2, s.pickup_datetime) > TRY_CONVERT(DATETIME2, s.dropoff_datetime) OR\n       TRY_CONVERT(DATETIME2, s.pickup_datetime) IS NULL OR\n       TRY_CONVERT(DATETIME2, s.dropoff_datetime) IS NULL\n  );\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "LoadCore_DedupeAndMetrics",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Quarantine_Rejected",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "-- Idempotent load for a given ingest_date: wipe that partition, then insert deduped winners from the slice.\n\nDECLARE @ingest_date DATE = '@{pipeline().parameters.run_date}';\n\n-- 1) Idempotent delete of existing partition\nDELETE FROM core.trip_clean WHERE ingest_date = @ingest_date;\n\n-- 2) Deterministic dedupe from slice\n;WITH ranked AS (\n  SELECT s.*,\n         ROW_NUMBER() OVER (\n           PARTITION BY s.trip_id   -- If trip_id is not reliable, replace with a compound natural key\n           ORDER BY s.loaded_at DESC, s.source_file_name DESC\n         ) AS rn\n  FROM core.trip_clean_slice s\n  WHERE s.ingest_date = @ingest_date\n)\nINSERT INTO core.trip_clean\n(\n  vendor_code, trip_id, pickup_ts_utc, dropoff_ts_utc,\n  trip_distance_km, fare_amount, payment_type, is_night_ride,\n  ingest_date, source_file_name, loaded_at\n)\nSELECT\n  vendor_code, trip_id, pickup_ts_utc, dropoff_ts_utc,\n  trip_distance_km, fare_amount, payment_type, is_night_ride,\n  ingest_date, source_file_name, loaded_at\nFROM ranked\nWHERE rn = 1;\n\n-- 3) Optional: drop the slice if you donâ€™t want to keep it\n-- DROP TABLE core.trip_clean_slice;\n\n-- 4) Observability metrics\nINSERT INTO ops.run_metrics (layer, table_name, ingest_date, rows_in, rows_out, rows_err, run_ts_utc)\nSELECT\n  'core', 'trip_clean', @ingest_date,\n  (SELECT COUNT(*) FROM stg.trip WHERE ingest_date = @ingest_date),\n  (SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date = @ingest_date),\n  (SELECT COUNT(*) FROM err.trip WHERE ingest_date = @ingest_date),\n  SYSUTCDATETIME();\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"dataset": {
				"type": "string",
				"defaultValue": "nyctaxi_yellow"
			},
			"run_date": {
				"type": "string",
				"defaultValue": "@{formatDateTime(utcNow(),'yyyy-MM-dd')}"
			}
		},
		"annotations": []
	}
}