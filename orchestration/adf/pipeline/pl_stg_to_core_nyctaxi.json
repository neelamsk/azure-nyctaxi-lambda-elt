{
	"name": "pl_stg_to_core_nyctaxi",
	"properties": {
		"activities": [
			{
				"name": "LogStart",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @run_id   NVARCHAR(64)  = '@{pipeline().RunId}';\nDECLARE @stage    NVARCHAR(32)  = 'stg_to_core';\nDECLARE @dataset  NVARCHAR(128) = '@{pipeline().parameters.dataset}';\nDECLARE @ingest   DATE          = '@{pipeline().parameters.run_date}';\n\nINSERT INTO ops.run_log (run_id, stage, dataset, ingest_date, status, started_at_utc)\nSELECT @run_id, @stage, @dataset, @ingest, 'STARTED', SYSUTCDATETIME();\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "BuildSlice_CTAS",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "LogStart",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "-- BuildSlice_CTAS\nDECLARE @ingest_date DATE = '@{pipeline().parameters.run_date}';\n\nIF OBJECT_ID('core.trip_clean_slice') IS NOT NULL\n  DROP TABLE core.trip_clean_slice;\n\nCREATE TABLE core.trip_clean_slice\nWITH (\n  DISTRIBUTION = ROUND_ROBIN,              -- safer since we don't have a reliable hash key\n  CLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT\n  UPPER(NULLIF(LTRIM(RTRIM(CAST(s.VendorID AS VARCHAR(32)))), '')) AS vendor_code,\n  CAST(NULL AS BIGINT)                                             AS trip_id,          -- NYC Taxi has no trip_id\n  TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime)                   AS pickup_ts_utc,\n  TRY_CONVERT(DATETIME2, s.tpep_dropoff_datetime)                  AS dropoff_ts_utc,\n  CASE\n    WHEN TRY_CAST(s.trip_distance AS FLOAT) IS NULL THEN NULL\n    ELSE ROUND(TRY_CAST(s.trip_distance AS FLOAT) * 1.609344, 3)\n  END                                                              AS trip_distance_km,\n  TRY_CAST(s.fare_amount AS DECIMAL(9,2))                          AS fare_amount,\n  COALESCE(\n    rp.payment_type_std,\n    CASE TRY_CAST(s.payment_type AS INT)\n      WHEN 1 THEN 'CARD'\n      WHEN 2 THEN 'CASH'\n      WHEN 3 THEN 'NO_CHARGE'\n      WHEN 4 THEN 'DISPUTE'\n    END\n  )                                                                AS payment_type,\n  CASE\n    WHEN TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime) IS NOT NULL\n     AND (DATEPART(HOUR, TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime)) BETWEEN 22 AND 23\n          OR DATEPART(HOUR, TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime)) BETWEEN 0 AND 5)\n    THEN 1 ELSE 0\n  END                                                              AS is_night_ride,\n  s.ingest_date,\n  s.source_file_name,\n  s.loaded_at\nFROM stg.trip AS s\nLEFT JOIN ref.payment_type_map rp\n  ON NULLIF(LTRIM(RTRIM(CAST(s.payment_type AS VARCHAR(50)))), '') = rp.payment_type_src\n AND rp.is_active = 1\nWHERE s.ingest_date = @ingest_date\n  AND TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime) IS NOT NULL\n  AND TRY_CONVERT(DATETIME2, s.tpep_dropoff_datetime) IS NOT NULL\n  AND TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime) <= TRY_CONVERT(DATETIME2, s.tpep_dropoff_datetime)\n  AND TRY_CAST(s.fare_amount AS DECIMAL(9,2)) >= 0\n  AND TRY_CAST(s.trip_distance AS FLOAT) >= 0;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Quarantine_Rejected",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "BuildSlice_CTAS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "-- Quarantine_Rejected (idempotent)\nDECLARE @ingest_date DATE = '@{pipeline().parameters.run_date}';\n\n-- NEW: clear prior rejects for this slice so reruns donâ€™t accumulate\nDELETE FROM err.trip WHERE ingest_date = @ingest_date;\n\nINSERT INTO err.trip (\n  ingest_date, source_file_name, loaded_at, reject_reason, raw_payload, recorded_at_utc\n)\nSELECT\n  s.ingest_date,\n  s.source_file_name,\n  s.loaded_at,\n  CASE\n    WHEN TRY_CAST(s.fare_amount AS DECIMAL(9,2)) < 0 THEN 'NEGATIVE_FARE'\n    WHEN TRY_CAST(s.trip_distance AS FLOAT) < 0 THEN 'NEGATIVE_DISTANCE'\n    WHEN TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime) > TRY_CONVERT(DATETIME2, s.tpep_dropoff_datetime) THEN 'PICKUP_AFTER_DROPOFF'\n    WHEN TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime) IS NULL OR TRY_CONVERT(DATETIME2, s.tpep_dropoff_datetime) IS NULL THEN 'NULL_TIME'\n    ELSE 'OTHER_BAD_VALUES'\n  END,\n  CONCAT(\n    'VendorID=', COALESCE(CAST(s.VendorID AS VARCHAR(16)),'NULL'), '; ',\n    'pickup=',  COALESCE(CONVERT(VARCHAR(19), TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime),120),'NULL'), '; ',\n    'dropoff=', COALESCE(CONVERT(VARCHAR(19), TRY_CONVERT(DATETIME2, s.tpep_dropoff_datetime),120),'NULL'), '; ',\n    'fare=',    COALESCE(CAST(s.fare_amount AS VARCHAR(32)),'NULL'), '; ',\n    'dist=',    COALESCE(CAST(s.trip_distance AS VARCHAR(32)),'NULL')\n  ),\n  SYSUTCDATETIME()\nFROM stg.trip s\nWHERE s.ingest_date = @ingest_date\n  AND (\n       TRY_CAST(s.fare_amount AS DECIMAL(9,2)) < 0 OR\n       TRY_CAST(s.trip_distance AS FLOAT) < 0 OR\n       TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime) IS NULL OR\n       TRY_CONVERT(DATETIME2, s.tpep_dropoff_datetime) IS NULL OR\n       TRY_CONVERT(DATETIME2, s.tpep_pickup_datetime) > TRY_CONVERT(DATETIME2, s.tpep_dropoff_datetime)\n  );\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "LoadCore_DedupeAndMetrics",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Quarantine_Rejected",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "-- LoadCore_DedupeAndMetrics\nDECLARE @ingest_date DATE = '@{pipeline().parameters.run_date}';\n\n-- 1) Idempotent delete of existing partition\nDELETE FROM core.trip_clean WHERE ingest_date = @ingest_date;\n\n-- 2) Deterministic dedupe (compound natural key, since there is no trip_id)\n;WITH ranked AS (\n  SELECT s.*,\n         ROW_NUMBER() OVER (\n           PARTITION BY\n             s.vendor_code,\n             s.pickup_ts_utc,\n             s.dropoff_ts_utc,\n             s.fare_amount,\n             s.trip_distance_km,\n             s.payment_type\n           ORDER BY s.loaded_at DESC, s.source_file_name DESC\n         ) AS rn\n  FROM core.trip_clean_slice s\n  WHERE s.ingest_date = @ingest_date\n)\nINSERT INTO core.trip_clean\n(\n  vendor_code, trip_id, pickup_ts_utc, dropoff_ts_utc,\n  trip_distance_km, fare_amount, payment_type, is_night_ride,\n  ingest_date, source_file_name, loaded_at\n)\nSELECT\n  vendor_code, NULL, pickup_ts_utc, dropoff_ts_utc,\n  trip_distance_km, fare_amount, payment_type, is_night_ride,\n  ingest_date, source_file_name, loaded_at\nFROM ranked\nWHERE rn = 1;\n\n-- Optional: clean up the slice to avoid clutter (keep if no concurrency)\n-- DROP TABLE core.trip_clean_slice;\n\n-- 3) Observability metrics\nINSERT INTO ops.run_metrics (\n  layer, table_name, ingest_date, rows_in, rows_out, rows_err, run_ts_utc, recorded_at_utc\n)\nSELECT\n  'core', 'trip_clean', @ingest_date,\n  (SELECT COUNT(*) FROM stg.trip        WHERE ingest_date = @ingest_date),\n  (SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date = @ingest_date),\n  (SELECT COUNT(*) FROM err.trip        WHERE ingest_date = @ingest_date),\n  SYSUTCDATETIME(), SYSUTCDATETIME();\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "CoreDQ_Gate",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "LoadCore_DedupeAndMetrics",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "-- CoreDQ_Gate: log outcomes to ops.dq_result and fail on hard errors\n\nDECLARE @run_id NVARCHAR(64)  = '@{pipeline().RunId}';\nDECLARE @stage  NVARCHAR(32)  = 'stg_to_core';\nDECLARE @d      DATE          = '@{pipeline().parameters.run_date}';\nDECLARE @now    DATETIME2(3)  = SYSUTCDATETIME();\n\n-- Row counts\nDECLARE @rows_stg   BIGINT = (SELECT COUNT(*) FROM stg.trip        WHERE ingest_date=@d);\nDECLARE @rows_core  BIGINT = (SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date=@d);\nDECLARE @rows_err   BIGINT = (SELECT COUNT(*) FROM err.trip        WHERE ingest_date=@d);\n\n-- Core consistency checks\nDECLARE @bad_time BIGINT =\n(SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date=@d AND pickup_ts_utc > dropoff_ts_utc);\n\nDECLARE @neg_fare BIGINT =\n(SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date=@d AND fare_amount < 0);\n\nDECLARE @neg_dist BIGINT =\n(SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date=@d AND trip_distance_km < 0);\n\nDECLARE @null_pickup BIGINT =\n(SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date=@d AND pickup_ts_utc IS NULL);\n\nDECLARE @null_dropoff BIGINT =\n(SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date=@d AND dropoff_ts_utc IS NULL);\n\n-- Duplicates in core after dedupe (should be zero)\nDECLARE @dupe_core BIGINT =\n(\n  SELECT COUNT(*) FROM (\n    SELECT vendor_code, pickup_ts_utc, dropoff_ts_utc, fare_amount, trip_distance_km, payment_type\n    FROM core.trip_clean\n    WHERE ingest_date=@d\n    GROUP BY vendor_code, pickup_ts_utc, dropoff_ts_utc, fare_amount, trip_distance_km, payment_type\n    HAVING COUNT(*) > 1\n  ) d\n);\n\n-- Core+Err should never exceed staging for a slice\nDECLARE @core_plus_err_gt_stg BIT =\n  CASE WHEN @rows_err IS NULL THEN 0\n       WHEN (@rows_core + @rows_err) > @rows_stg THEN 1 ELSE 0 END;\n\n-- Avoid duplicate log rows for retries/reruns of the same run_id\nDELETE FROM ops.dq_result WHERE run_id=@run_id AND stage=@stage AND ingest_date=@d;\n\n-- Log all outcomes (PASSED/FAILED)\nINSERT INTO ops.dq_result\n(run_id, stage, check_name, ingest_date, status, actual_value, threshold_value, error_message, created_at_utc)\nSELECT @run_id, @stage, 'rowcount_core_gt_0', @d,\n       CASE WHEN @rows_core > 0 THEN 'PASSED' ELSE 'FAILED' END,\n       @rows_core, 1, NULL, @now\nUNION ALL\nSELECT @run_id, @stage, 'no_bad_time_order', @d,\n       CASE WHEN @bad_time = 0 THEN 'PASSED' ELSE 'FAILED' END,\n       @bad_time, 0, NULL, @now\nUNION ALL\nSELECT @run_id, @stage, 'no_negative_fare', @d,\n       CASE WHEN @neg_fare = 0 THEN 'PASSED' ELSE 'FAILED' END,\n       @neg_fare, 0, NULL, @now\nUNION ALL\nSELECT @run_id, @stage, 'no_negative_distance', @d,\n       CASE WHEN @neg_dist = 0 THEN 'PASSED' ELSE 'FAILED' END,\n       @neg_dist, 0, NULL, @now\nUNION ALL\nSELECT @run_id, @stage, 'no_null_pickup_ts', @d,\n       CASE WHEN @null_pickup = 0 THEN 'PASSED' ELSE 'FAILED' END,\n       @null_pickup, 0, NULL, @now\nUNION ALL\nSELECT @run_id, @stage, 'no_null_dropoff_ts', @d,\n       CASE WHEN @null_dropoff = 0 THEN 'PASSED' ELSE 'FAILED' END,\n       @null_dropoff, 0, NULL, @now\nUNION ALL\nSELECT @run_id, @stage, 'no_duplicate_core_rows', @d,\n       CASE WHEN @dupe_core = 0 THEN 'PASSED' ELSE 'FAILED' END,\n       @dupe_core, 0, NULL, @now\nUNION ALL\nSELECT @run_id, @stage, 'core_plus_err_le_stg', @d,\n       CASE WHEN @core_plus_err_gt_stg = 0 THEN 'PASSED' ELSE 'FAILED' END,\n       (@rows_core + @rows_err) - @rows_stg, 0, NULL, @now;\n\n-- Hard fail if any FAILED status exists for this run/date\nIF EXISTS (\n  SELECT 1 FROM ops.dq_result\n  WHERE run_id=@run_id AND stage=@stage AND ingest_date=@d AND status='FAILED'\n)\n  THROW 53000, 'DQ FAIL: One or more core checks failed. See ops.dq_result for details.', 1;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "LogSuccess",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "CoreDQ_Gate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "-- LogSuccess (after CoreDQ_Gate succeeds)\nDECLARE @run_id   NVARCHAR(64)  = '@{pipeline().RunId}';\nDECLARE @stage    NVARCHAR(32)  = 'stg_to_core';\nDECLARE @dataset  NVARCHAR(128) = '@{pipeline().parameters.dataset}';\nDECLARE @d        DATE          = '@{pipeline().parameters.run_date}';\n\nDECLARE @rows BIGINT = (SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date = @d);\n\n-- Try to update existing STARTED row\nUPDATE ops.run_log\nSET status = 'SUCCEEDED',\n    rows_copied = @rows,\n    finished_at_utc = CAST(SYSUTCDATETIME() AS DATETIME2(3))\nWHERE run_id = @run_id\n  AND stage  = @stage;\n\n-- Fallback if no row exists (avoid @@ROWCOUNT)\nIF NOT EXISTS (SELECT 1 FROM ops.run_log WHERE run_id = @run_id AND stage = @stage)\nBEGIN\n  INSERT INTO ops.run_log\n    (run_id, stage, dataset, ingest_date, status, started_at_utc, finished_at_utc, rows_copied)\n  SELECT\n    @run_id, @stage, @dataset, @d, 'SUCCEEDED',\n    CAST(SYSUTCDATETIME() AS DATETIME2(3)),\n    CAST(SYSUTCDATETIME() AS DATETIME2(3)),\n    @rows;\nEND\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "LogFailure",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "CoreDQ_Gate",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "-- LogFailure (after CoreDQ_Gate fails)\nDECLARE @run_id   NVARCHAR(64)  = '@{pipeline().RunId}';\nDECLARE @stage    NVARCHAR(32)  = 'stg_to_core';\nDECLARE @dataset  NVARCHAR(128) = '@{pipeline().parameters.dataset}';\nDECLARE @d        DATE          = '@{pipeline().parameters.run_date}';\n\nDECLARE @rows BIGINT = (SELECT COUNT(*) FROM core.trip_clean WHERE ingest_date = @d);\n\n-- Try to update existing STARTED row\nUPDATE ops.run_log\nSET status = 'FAILED',\n    rows_copied = @rows,\n    finished_at_utc = CAST(SYSUTCDATETIME() AS DATETIME2(3))\nWHERE run_id = @run_id\n  AND stage  = @stage;\n\n-- Fallback if no row exists (avoid @@ROWCOUNT)\nIF NOT EXISTS (SELECT 1 FROM ops.run_log WHERE run_id = @run_id AND stage = @stage)\nBEGIN\n  INSERT INTO ops.run_log\n    (run_id, stage, dataset, ingest_date, status, started_at_utc, finished_at_utc, rows_copied)\n  SELECT\n    @run_id, @stage, @dataset, @d, 'FAILED',\n    CAST(SYSUTCDATETIME() AS DATETIME2(3)),\n    CAST(SYSUTCDATETIME() AS DATETIME2(3)),\n    @rows;\nEND\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"dataset": {
				"type": "string",
				"defaultValue": "nyctaxi_yellow"
			},
			"run_date": {
				"type": "string",
				"defaultValue": "@{formatDateTime(utcNow(),'yyyy-MM-dd')}"
			}
		},
		"annotations": []
	}
}