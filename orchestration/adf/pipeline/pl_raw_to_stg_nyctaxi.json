{
	"name": "pl_raw_to_stg_nyctaxi",
	"properties": {
		"activities": [
			{
				"name": "DeleteStagingPartition",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "LogTheRun",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DELETE FROM stg.trip WHERE ingest_date = '@{pipeline().parameters.run_date}';\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "GetFileList",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "DeleteStagingPartition",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_raw_folder_adf",
						"type": "DatasetReference",
						"parameters": {
							"p_dataset": {
								"value": "@pipeline().parameters.dataset",
								"type": "Expression"
							},
							"p_run_date": {
								"value": "@pipeline().parameters.run_date",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "FilterParquet",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "GetFileList",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetFileList').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(equals(item().type,'File'),\n     endsWith(item().name,'.snappy.millis.parquet'))\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "FilterParquet",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('FilterParquet').output.value",
						"type": "Expression"
					},
					"batchCount": 4,
					"activities": [
						{
							"name": "IfNeedsSnappy",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@not(endsWith(item().name,'.snappy.millis.parquet'))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "ConvertToSnappy",
										"type": "SynapseNotebook",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": {
													"value": "nb_convert_parquet_to_snappy",
													"type": "Expression"
												},
												"type": "NotebookReference"
											},
											"parameters": {
												"account": {
													"value": "eltazr3adls",
													"type": "string"
												},
												"file_system": {
													"value": "raw",
													"type": "string"
												},
												"dataset": {
													"value": {
														"value": "@pipeline().parameters.dataset",
														"type": "Expression"
													},
													"type": "string"
												},
												"ingest_date": {
													"value": {
														"value": "@pipeline().parameters.run_date",
														"type": "Expression"
													},
													"type": "string"
												},
												"src_file_name": {
													"value": {
														"value": "@item().name",
														"type": "Expression"
													},
													"type": "string"
												},
												"tgt_file_name": {
													"value": {
														"value": "@replace(item().name, '.parquet', '.snappy.millis.parquet')",
														"type": "Expression"
													},
													"type": "string"
												}
											},
											"snapshot": true,
											"sparkPool": {
												"referenceName": {
													"value": "spsmall",
													"type": "Expression"
												},
												"type": "BigDataPoolReference"
											},
											"executorSize": "Small",
											"conf": {
												"spark.dynamicAllocation.enabled": null,
												"spark.dynamicAllocation.minExecutors": null,
												"spark.dynamicAllocation.maxExecutors": null
											},
											"driverSize": "Small",
											"numExecutors": null
										},
										"linkedServiceName": {
											"referenceName": "AzureSynapseArtifacts2",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						},
						{
							"name": "CopyToStaging_copy1",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "IfNeedsSnappy",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"additionalColumns": [
										{
											"name": "ingest_date",
											"value": {
												"value": "@{pipeline().parameters.run_date}",
												"type": "Expression"
											}
										},
										{
											"name": "source_file_name",
											"value": {
												"value": "@{item().name}",
												"type": "Expression"
											}
										},
										{
											"name": "loaded_at",
											"value": {
												"value": "@{utcnow()}",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "ParquetReadSettings"
									}
								},
								"sink": {
									"type": "SqlDWSink",
									"writeBehavior": "Insert",
									"sqlWriterUseTableLock": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "VendorID",
												"type": "Int32",
												"physicalType": "INT32"
											},
											"sink": {
												"name": "VendorID",
												"type": "Int16",
												"physicalType": "smallint"
											}
										},
										{
											"source": {
												"name": "tpep_pickup_datetime",
												"type": "String",
												"physicalType": "UTF8"
											},
											"sink": {
												"name": "tpep_pickup_datetime",
												"type": "DateTime",
												"physicalType": "datetime2"
											}
										},
										{
											"source": {
												"name": "tpep_dropoff_datetime",
												"type": "String",
												"physicalType": "UTF8"
											},
											"sink": {
												"name": "tpep_dropoff_datetime",
												"type": "DateTime",
												"physicalType": "datetime2"
											}
										},
										{
											"source": {
												"name": "passenger_count",
												"type": "Int64",
												"physicalType": "INT64"
											},
											"sink": {
												"name": "passenger_count",
												"type": "Int16",
												"physicalType": "smallint"
											}
										},
										{
											"source": {
												"name": "trip_distance",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "trip_distance",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 3,
												"precision": 9
											}
										},
										{
											"source": {
												"name": "RatecodeID",
												"type": "Int64",
												"physicalType": "INT64"
											},
											"sink": {
												"name": "RatecodeID",
												"type": "Int16",
												"physicalType": "smallint"
											}
										},
										{
											"source": {
												"name": "store_and_fwd_flag",
												"type": "String",
												"physicalType": "UTF8"
											},
											"sink": {
												"name": "store_and_fwd_flag",
												"type": "String",
												"physicalType": "char"
											}
										},
										{
											"source": {
												"name": "PULocationID",
												"type": "Int32",
												"physicalType": "INT32"
											},
											"sink": {
												"name": "PULocationID",
												"type": "Int16",
												"physicalType": "smallint"
											}
										},
										{
											"source": {
												"name": "DOLocationID",
												"type": "Int32",
												"physicalType": "INT32"
											},
											"sink": {
												"name": "DOLocationID",
												"type": "Int16",
												"physicalType": "smallint"
											}
										},
										{
											"source": {
												"name": "payment_type",
												"type": "Int64",
												"physicalType": "INT64"
											},
											"sink": {
												"name": "payment_type",
												"type": "Int16",
												"physicalType": "smallint"
											}
										},
										{
											"source": {
												"name": "fare_amount",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "fare_amount",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "extra",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "extra",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "mta_tax",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "mta_tax",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "tip_amount",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "tip_amount",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "tolls_amount",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "tolls_amount",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "improvement_surcharge",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "improvement_surcharge",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "total_amount",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "total_amount",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "congestion_surcharge",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "congestion_surcharge",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "Airport_fee",
												"type": "Double",
												"physicalType": "DOUBLE"
											},
											"sink": {
												"name": "airport_fee",
												"type": "Decimal",
												"physicalType": "decimal",
												"scale": 2,
												"precision": 10
											}
										},
										{
											"source": {
												"name": "ingest_date",
												"type": "String"
											},
											"sink": {
												"name": "ingest_date",
												"type": "Date",
												"physicalType": "date"
											}
										},
										{
											"source": {
												"name": "source_file_name",
												"type": "String"
											},
											"sink": {
												"name": "source_file_name",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "loaded_at",
												"type": "String"
											},
											"sink": {
												"name": "loaded_at",
												"type": "DateTime",
												"physicalType": "datetime2"
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_raw_parquet_adf",
									"type": "DatasetReference",
									"parameters": {
										"p_dataset": "@pipeline().parameters.dataset",
										"p_run_date": "@pipeline().parameters.run_date",
										"p_file_name": "@item().name"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_syn_stg_trip_adf",
									"type": "DatasetReference"
								}
							]
						},
						{
							"name": "DQ_Rowcount",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "CopyToStaging_copy1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "ls_syn_sql",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "DECLARE @run_id NVARCHAR(64)='@{pipeline().RunId}';\nDECLARE @stage  NVARCHAR(32)='raw_to_stg';\nDECLARE @d      DATE='@{pipeline().parameters.run_date}';\nDECLARE @now    DATETIME2(3)=SYSUTCDATETIME();\nDECLARE @cnt    BIGINT;\nDECLARE @status NVARCHAR(16);\n\nSELECT @cnt = COUNT(*) FROM stg.trip WHERE ingest_date=@d;\nSET @status = CASE WHEN @cnt>0 THEN 'PASSED' ELSE 'FAILED' END;\n\nINSERT INTO ops.dq_result (run_id,stage,check_name,ingest_date,status,actual_value,threshold_value,error_message,created_at_utc)\nSELECT @run_id,@stage,'rowcount_gt_0',@d,@status,@cnt,1,NULL,@now;\n\nIF @cnt = 0\n  THROW 51000, 'DQ Rowcount failed: 0 rows loaded for ingest_date', 1;\n",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "DQ_NullPickup",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "DQ_Rowcount",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "ls_syn_sql",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "DECLARE @run_id NVARCHAR(64)='@{pipeline().RunId}';\nDECLARE @stage  NVARCHAR(32)='raw_to_stg';\nDECLARE @d      DATE='@{pipeline().parameters.run_date}';\nDECLARE @now    DATETIME2(3)=SYSUTCDATETIME();\nDECLARE @bad    BIGINT;\nDECLARE @status NVARCHAR(16);\n\nSELECT @bad = COUNT(*) FROM stg.trip WHERE ingest_date=@d AND tpep_pickup_datetime IS NULL;\nSET @status = CASE WHEN @bad=0 THEN 'PASSED' ELSE 'FAILED' END;\n\nINSERT INTO ops.dq_result (run_id,stage,check_name,ingest_date,status,actual_value,threshold_value,error_message,created_at_utc)\nSELECT @run_id,@stage,'no_null_pickup_ts',@d,@status,@bad,0,NULL,@now;\n\nIF @bad > 0\n  THROW 51001, 'DQ Null pickup datetime failed', 1;\n",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "DQ_NegativeFare",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "DQ_NullPickup",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "ls_syn_sql",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "DECLARE @run_id NVARCHAR(64)='@{pipeline().RunId}';\nDECLARE @stage  NVARCHAR(32)='raw_to_stg';\nDECLARE @d      DATE='@{pipeline().parameters.run_date}';\nDECLARE @now    DATETIME2(3)=SYSUTCDATETIME();\nDECLARE @neg    BIGINT;\nDECLARE @status NVARCHAR(16);\n\nSELECT @neg = COUNT(*) FROM stg.trip WHERE ingest_date=@d AND fare_amount < 0;\nSET @status = CASE WHEN @neg=0 THEN 'PASSED' ELSE 'WARNING' END;\n\nINSERT INTO ops.dq_result (run_id,stage,check_name,ingest_date,status,actual_value,threshold_value,error_message,created_at_utc)\nSELECT @run_id,@stage,'no_negative_fare',@d,@status,@neg,0,NULL,@now;\n\n/* No THROW here – we only log and proceed */\n",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			},
			{
				"name": "LogTheRun",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @run_id     NVARCHAR(64)  = '@{pipeline().RunId}';\nDECLARE @stage      NVARCHAR(32)  = 'raw_to_stg';\nDECLARE @dataset    NVARCHAR(128) = '@{pipeline().parameters.dataset}';\n--DECLARE @ingest     DATE          = '@{pipeline().parameters.run_date}';\n\nDECLARE @ingest_date_str NVARCHAR(32) = '@{pipeline().parameters.run_date}';\nDECLARE @ingest DATE = TRY_CONVERT(DATE, @ingest_date_str, 23);\nIF @ingest IS NULL\n  THROW 53001, 'Bad run_date format. Expected yyyy-MM-dd.', 1;\n\nDECLARE @started    DATETIME2(3)  = SYSUTCDATETIME();\n\nINSERT INTO ops.run_log(run_id, stage, dataset, ingest_date, status, started_at_utc)\nVALUES (@run_id, @stage, @dataset, @ingest, 'STARTED', @started);\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "UpdateTheLogWithSuccess",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @run_id    NVARCHAR(64)  = '@{pipeline().RunId}';\nDECLARE @stage     NVARCHAR(32)  = 'raw_to_stg';\nDECLARE @ingest    DATE          = '@{pipeline().parameters.run_date}';\nDECLARE @rows      BIGINT        = (SELECT COUNT(*) FROM stg.trip WHERE ingest_date = @ingest);\nDECLARE @finished  DATETIME2(3)  = SYSUTCDATETIME();\n\nUPDATE ops.run_log\nSET status = 'SUCCEEDED',\n    rows_copied = @rows,\n    finished_at_utc = @finished\nWHERE run_id = @run_id AND stage = @stage;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "UpdateTheLogWithFailure",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @run_id    NVARCHAR(64)  = '@{pipeline().RunId}';\nDECLARE @stage     NVARCHAR(32)  = 'raw_to_stg';\nDECLARE @ingest    DATE          = '@{pipeline().parameters.run_date}';\nDECLARE @rows      BIGINT        = (SELECT COUNT(*) FROM stg.trip WHERE ingest_date = @ingest);\nDECLARE @finished  DATETIME2(3)  = SYSUTCDATETIME();\n\nUPDATE ops.run_log\nSET status = 'FAILED',\n    rows_copied = @rows,\n    finished_at_utc = @finished\nWHERE run_id = @run_id AND stage = @stage;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"dataset": {
				"type": "string",
				"defaultValue": "nyctaxi_yellow"
			},
			"run_date": {
				"type": "string",
				"defaultValue": "@formatDateTime(utcnow(),'yyyy-MM-dd')"
			},
			"file_name": {
				"type": "string"
			},
			"run_id": {
				"type": "string",
				"defaultValue": "@pipeline().RunId"
			}
		},
		"annotations": []
	}
}