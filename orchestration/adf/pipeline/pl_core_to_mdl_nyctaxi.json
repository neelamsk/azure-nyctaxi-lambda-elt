{
	"name": "pl_core_to_mdl_nyctaxi",
	"properties": {
		"activities": [
			{
				"name": "LogStart",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @run_id NVARCHAR(64)='@{pipeline().RunId}';\nDECLARE @stage  NVARCHAR(32)='core_to_mdl';\nDECLARE @ds     NVARCHAR(128)='@{pipeline().parameters.dataset}';\nDECLARE @d      DATE='@{pipeline().parameters.run_date}';\n\nINSERT INTO ops.run_log (run_id, stage, dataset, ingest_date, status, started_at_utc)\nSELECT @run_id, @stage, @ds, @d, 'STARTED', SYSUTCDATETIME();\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "DimVendor_Upsert",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "LogStart",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @d DATE = '@{pipeline().parameters.run_date}';\n\n;WITH src AS (\n  SELECT DISTINCT UPPER(LTRIM(RTRIM(vendor_code))) AS vendor_code_nk\n  FROM core.trip_clean\n  WHERE ingest_date = @d\n    AND vendor_code IS NOT NULL AND LTRIM(RTRIM(vendor_code)) <> ''\n)\nINSERT INTO mdl.dim_vendor (vendor_code_nk, active_flag, valid_from_utc)\nSELECT s.vendor_code_nk, 1, SYSUTCDATETIME()\nFROM src s\nLEFT JOIN mdl.dim_vendor t\n  ON t.vendor_code_nk = s.vendor_code_nk\nWHERE t.vendor_code_nk IS NULL;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "DimPayment_Upsert",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "DimVendor_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @d DATE = '@{pipeline().parameters.run_date}';\n\n;WITH src AS (\n  SELECT DISTINCT UPPER(LTRIM(RTRIM(payment_type))) AS payment_type_nk\n  FROM core.trip_clean\n  WHERE ingest_date = @d\n    AND payment_type IS NOT NULL AND LTRIM(RTRIM(payment_type)) <> ''\n)\nINSERT INTO mdl.dim_payment_type (payment_type_nk)\nSELECT s.payment_type_nk\nFROM src s\nLEFT JOIN mdl.dim_payment_type t\n  ON t.payment_type_nk = s.payment_type_nk\nWHERE t.payment_type_nk IS NULL;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "DimRate_Upsert",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "DimPayment_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @d DATE = '@{pipeline().parameters.run_date}';\n\n;WITH src AS (\n  SELECT DISTINCT CAST(RatecodeID AS VARCHAR(16)) AS rate_code_nk\n  FROM stg.trip\n  WHERE ingest_date = @d\n    AND RatecodeID IS NOT NULL\n)\nINSERT INTO mdl.dim_rate_code (rate_code_nk)\nSELECT s.rate_code_nk\nFROM src s\nLEFT JOIN mdl.dim_rate_code t\n  ON t.rate_code_nk = s.rate_code_nk\nWHERE t.rate_code_nk IS NULL;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "DimFlag_Upsert",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "DimRate_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @d DATE = '@{pipeline().parameters.run_date}';\n\n;WITH src AS (\n  SELECT DISTINCT UPPER(LTRIM(RTRIM(store_and_fwd_flag))) AS flag_nk\n  FROM stg.trip\n  WHERE ingest_date = @d\n    AND store_and_fwd_flag IS NOT NULL\n    AND LTRIM(RTRIM(store_and_fwd_flag)) <> ''\n)\nINSERT INTO mdl.dim_flag (flag_nk, meaning)\nSELECT s.flag_nk, NULL\nFROM src s\nLEFT JOIN mdl.dim_flag t\n  ON t.flag_nk = s.flag_nk\nWHERE t.flag_nk IS NULL;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "DimLocation_Upsert",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "DimFlag_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @d DATE = '@{pipeline().parameters.run_date}';\n\n;WITH src AS (\n  SELECT DISTINCT CAST(PULocationID AS SMALLINT) AS location_id_nk\n  FROM stg.trip\n  WHERE ingest_date = @d AND PULocationID IS NOT NULL\n  UNION\n  SELECT DISTINCT CAST(DOLocationID AS SMALLINT) AS location_id_nk\n  FROM stg.trip\n  WHERE ingest_date = @d AND DOLocationID IS NOT NULL\n)\nINSERT INTO mdl.dim_location (location_id_nk)\nSELECT s.location_id_nk\nFROM src s\nLEFT JOIN mdl.dim_location t\n  ON t.location_id_nk = s.location_id_nk\nWHERE t.location_id_nk IS NULL;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "FactTrip_Load",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "DimVendor_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "DimPayment_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "DimRate_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "DimFlag_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "DimLocation_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @d DATE = '@{pipeline().parameters.run_date}';\n\n-- 1) Idempotent delete\nDELETE FROM mdl.fact_trip WHERE ingest_date = @d;\n\n-- 2) Prepare the staging and core slices + correlation\nWITH c AS (\n  SELECT\n    vendor_code,\n    pickup_ts_utc,\n    dropoff_ts_utc,\n    trip_distance_km,\n    fare_amount,\n    payment_type,\n    ingest_date,\n    source_file_name,\n    loaded_at\n  FROM core.trip_clean\n  WHERE ingest_date = @d\n),\ns AS (\n  SELECT\n    -- Recompute comparable types from stg\n    UPPER(LTRIM(RTRIM(CONVERT(VARCHAR(32), VendorID))))                 AS vendor_code_nk,\n    TRY_CONVERT(DATETIME2, tpep_pickup_datetime)                         AS pickup_ts_utc,\n    TRY_CONVERT(DATETIME2, tpep_dropoff_datetime)                        AS dropoff_ts_utc,\n    ROUND(TRY_CAST(trip_distance AS FLOAT) * 1.609344, 3)                AS trip_distance_km_stg,\n    TRY_CAST(fare_amount AS DECIMAL(9,2))                                AS fare_amount_clean,\n    CAST(RatecodeID AS VARCHAR(16))                                      AS rate_code_nk,\n    UPPER(LTRIM(RTRIM(store_and_fwd_flag)))                              AS flag_nk,\n    CAST(PULocationID AS SMALLINT)                                       AS pu_location_nk,\n    CAST(DOLocationID AS SMALLINT)                                       AS do_location_nk,\n    TRY_CAST(tip_amount AS DECIMAL(10,2))                                AS tip_amount,\n    TRY_CAST(tolls_amount AS DECIMAL(10,2))                              AS tolls_amount,\n    TRY_CAST(total_amount AS DECIMAL(10,2))                              AS total_amount,\n    ingest_date,\n    source_file_name,\n    loaded_at\n  FROM stg.trip\n  WHERE ingest_date = @d\n),\nj AS (\n  -- Correlate 1 core row to its best stg row using lineage + cleaned keys\n  SELECT\n    c.*,\n    s.rate_code_nk, s.flag_nk, s.pu_location_nk, s.do_location_nk,\n    s.tip_amount, s.tolls_amount, s.total_amount,\n    ROW_NUMBER() OVER (\n      PARTITION BY\n        c.vendor_code, c.pickup_ts_utc, c.dropoff_ts_utc,\n        c.fare_amount, c.trip_distance_km\n      ORDER BY s.loaded_at DESC, s.source_file_name DESC\n    ) AS rn\n  FROM c\n  LEFT JOIN s\n    ON c.ingest_date = s.ingest_date\n   AND c.source_file_name = s.source_file_name\n   AND c.pickup_ts_utc   = s.pickup_ts_utc\n   AND c.dropoff_ts_utc  = s.dropoff_ts_utc\n   AND c.fare_amount     = s.fare_amount_clean\n   AND c.trip_distance_km = s.trip_distance_km_stg\n   AND UPPER(LTRIM(RTRIM(c.vendor_code))) = s.vendor_code_nk\n),\npicked AS (\n  SELECT *\n  FROM j\n  WHERE rn = 1\n),\nkeyed AS (\n  -- Map NKs to SKs and compute date/time keys\n  SELECT\n    -- Deterministic trip_id (SHA-256 hex) built from the same dedupe columns used in core\n    CONVERT(CHAR(64),\n      HASHBYTES('SHA2_256', CONCAT(\n        COALESCE(UPPER(LTRIM(RTRIM(vendor_code))),'') , '|',\n        CONVERT(VARCHAR(23), pickup_ts_utc, 126)      , '|',\n        CONVERT(VARCHAR(23), dropoff_ts_utc, 126)     , '|',\n        CONVERT(VARCHAR(50), CAST(fare_amount AS DECIMAL(18,2))) , '|',\n        CONVERT(VARCHAR(50), CAST(trip_distance_km AS DECIMAL(18,3))) , '|',\n        COALESCE(UPPER(LTRIM(RTRIM(payment_type))),'')\n      ))\n    , 2) AS trip_id,\n\n    (YEAR(pickup_ts_utc)*10000 + MONTH(pickup_ts_utc)*100 + DAY(pickup_ts_utc)) AS pickup_date_key,\n    (DATEPART(HOUR, pickup_ts_utc) * 3600 +\n     DATEPART(MINUTE, pickup_ts_utc) * 60 +\n     DATEPART(SECOND, pickup_ts_utc)) AS pickup_time_key,\n\n    -- Lookups (COALESCE to -1 unknown if not found)\n    COALESCE(v.vendor_key, -1)         AS vendor_key,\n    COALESCE(p.payment_type_key, -1)   AS payment_type_key,\n    COALESCE(r.rate_code_key, -1)      AS rate_code_key,\n    COALESCE(f.flag_key, -1)           AS flag_key,\n    COALESCE(pu.location_key, -1)      AS pu_location_key,\n    COALESCE(do_.location_key, -1)     AS do_location_key,\n\n    trip_distance_km,\n    fare_amount,\n    tip_amount,\n    tolls_amount,\n    total_amount,\n    ingest_date,\n    source_file_name,\n    loaded_at\n  FROM picked x\n  LEFT JOIN mdl.dim_vendor        v  ON v.vendor_code_nk   = UPPER(LTRIM(RTRIM(x.vendor_code)))\n  LEFT JOIN mdl.dim_payment_type  p  ON p.payment_type_nk  = UPPER(LTRIM(RTRIM(x.payment_type)))\n  LEFT JOIN mdl.dim_rate_code     r  ON r.rate_code_nk     = x.rate_code_nk\n  LEFT JOIN mdl.dim_flag          f  ON f.flag_nk          = x.flag_nk\n  LEFT JOIN mdl.dim_location      pu ON pu.location_id_nk  = x.pu_location_nk\n  LEFT JOIN mdl.dim_location      do_ ON do_.location_id_nk = x.do_location_nk\n)\nINSERT INTO mdl.fact_trip\n(\n  trip_id,\n  pickup_date_key, pickup_time_key,\n  pu_location_key, do_location_key,\n  vendor_key, payment_type_key, rate_code_key, flag_key,\n  trip_distance_km, fare_amount, tip_amount, tolls_amount, total_amount,\n  ingest_date, source_file_name, loaded_at\n)\nSELECT\n  trip_id,\n  pickup_date_key, pickup_time_key,\n  pu_location_key, do_location_key,\n  vendor_key, payment_type_key, rate_code_key, flag_key,\n  trip_distance_km, fare_amount, tip_amount, tolls_amount, total_amount,\n  ingest_date, source_file_name, loaded_at\nFROM keyed;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "ModelDQ_Gate",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "FactTrip_Load",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "DECLARE @d DATE = '@{pipeline().parameters.run_date}';\n\n-- 1) Idempotent delete\nDELETE FROM mdl.fact_trip WHERE ingest_date = @d;\n\n-- 2) Prepare slices\nWITH c AS (\n  SELECT\n    -- A unique, deterministic id for each core row in this slice\n    ROW_NUMBER() OVER (\n      ORDER BY\n        source_file_name, loaded_at,\n        vendor_code, pickup_ts_utc, dropoff_ts_utc,\n        fare_amount, trip_distance_km, payment_type\n    ) AS core_row_id,\n    vendor_code,\n    pickup_ts_utc,\n    dropoff_ts_utc,\n    trip_distance_km,\n    fare_amount,\n    payment_type,\n    ingest_date,\n    source_file_name,\n    loaded_at\n  FROM core.trip_clean\n  WHERE ingest_date = @d\n),\ns AS (\n  SELECT\n    UPPER(LTRIM(RTRIM(CONVERT(VARCHAR(32), VendorID))))        AS vendor_code_nk,\n    TRY_CONVERT(DATETIME2, tpep_pickup_datetime)                AS pickup_ts_utc,\n    TRY_CONVERT(DATETIME2, tpep_dropoff_datetime)               AS dropoff_ts_utc,\n    ROUND(TRY_CAST(trip_distance AS FLOAT) * 1.609344, 3)       AS trip_distance_km_stg,\n    TRY_CAST(fare_amount AS DECIMAL(9,2))                       AS fare_amount_clean,\n    CAST(RatecodeID AS VARCHAR(16))                             AS rate_code_nk,\n    UPPER(LTRIM(RTRIM(store_and_fwd_flag)))                     AS flag_nk,\n    CAST(PULocationID AS SMALLINT)                              AS pu_location_nk,\n    CAST(DOLocationID AS SMALLINT)                              AS do_location_nk,\n    TRY_CAST(tip_amount AS DECIMAL(10,2))                       AS tip_amount,\n    TRY_CAST(tolls_amount AS DECIMAL(10,2))                     AS tolls_amount,\n    TRY_CAST(total_amount AS DECIMAL(10,2))                     AS total_amount,\n    ingest_date,\n    source_file_name,\n    loaded_at\n  FROM stg.trip\n  WHERE ingest_date = @d\n),\nj AS (\n  -- LEFT JOIN so every core row survives even if no stg row matches\n  SELECT\n    c.*,\n    s.rate_code_nk, s.flag_nk, s.pu_location_nk, s.do_location_nk,\n    s.tip_amount, s.tolls_amount, s.total_amount,\n    ROW_NUMBER() OVER (\n      PARTITION BY c.core_row_id\n      ORDER BY s.loaded_at DESC, s.source_file_name DESC\n    ) AS rn\n  FROM c\n  LEFT JOIN s\n    ON c.ingest_date      = s.ingest_date\n   AND c.source_file_name = s.source_file_name\n   AND c.pickup_ts_utc    = s.pickup_ts_utc\n   AND c.dropoff_ts_utc   = s.dropoff_ts_utc\n),\npicked AS (\n  SELECT * FROM j WHERE rn = 1\n),\nkeyed AS (\n  SELECT\n    CONVERT(CHAR(64),\n      HASHBYTES('SHA2_256', CONCAT(\n        COALESCE(UPPER(LTRIM(RTRIM(vendor_code))),'') , '|',\n        CONVERT(VARCHAR(23), pickup_ts_utc, 126)      , '|',\n        CONVERT(VARCHAR(23), dropoff_ts_utc, 126)     , '|',\n        CONVERT(VARCHAR(50), CAST(fare_amount AS DECIMAL(18,2))) , '|',\n        CONVERT(VARCHAR(50), CAST(trip_distance_km AS DECIMAL(18,3))) , '|',\n        COALESCE(UPPER(LTRIM(RTRIM(payment_type))),'')\n      ))\n    , 2) AS trip_id,\n\n    (YEAR(pickup_ts_utc)*10000 + MONTH(pickup_ts_utc)*100 + DAY(pickup_ts_utc)) AS pickup_date_key,\n    (DATEPART(HOUR, pickup_ts_utc) * 3600 +\n     DATEPART(MINUTE, pickup_ts_utc) * 60 +\n     DATEPART(SECOND, pickup_ts_utc)) AS pickup_time_key,\n\n    COALESCE(v.vendor_key, -1)       AS vendor_key,\n    COALESCE(p.payment_type_key, -1) AS payment_type_key,\n    COALESCE(r.rate_code_key, -1)    AS rate_code_key,\n    COALESCE(f.flag_key, -1)         AS flag_key,\n    COALESCE(pu.location_key, -1)    AS pu_location_key,\n    COALESCE(do_.location_key, -1)   AS do_location_key,\n\n    trip_distance_km,\n    fare_amount,\n    tip_amount,\n    tolls_amount,\n    total_amount,\n    ingest_date,\n    source_file_name,\n    loaded_at\n  FROM picked x\n  LEFT JOIN mdl.dim_vendor        v  ON v.vendor_code_nk   = UPPER(LTRIM(RTRIM(x.vendor_code)))\n  LEFT JOIN mdl.dim_payment_type  p  ON p.payment_type_nk  = UPPER(LTRIM(RTRIM(x.payment_type)))\n  LEFT JOIN mdl.dim_rate_code     r  ON r.rate_code_nk     = x.rate_code_nk\n  LEFT JOIN mdl.dim_flag          f  ON f.flag_nk          = x.flag_nk\n  LEFT JOIN mdl.dim_location      pu ON pu.location_id_nk  = x.pu_location_nk\n  LEFT JOIN mdl.dim_location      do_ ON do_.location_id_nk = x.do_location_nk\n)\nINSERT INTO mdl.fact_trip\n(\n  trip_id,\n  pickup_date_key, pickup_time_key,\n  pu_location_key, do_location_key,\n  vendor_key, payment_type_key, rate_code_key, flag_key,\n  trip_distance_km, fare_amount, tip_amount, tolls_amount, total_amount,\n  ingest_date, source_file_name, loaded_at\n)\nSELECT\n  trip_id,\n  pickup_date_key, pickup_time_key,\n  pu_location_key, do_location_key,\n  vendor_key, payment_type_key, rate_code_key, flag_key,\n  trip_distance_km, fare_amount, tip_amount, tolls_amount, total_amount,\n  ingest_date, source_file_name, loaded_at\nFROM keyed;\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "LogSuccess",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "ModelDQ_Gate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "DECLARE @run_id NVARCHAR(64)='@{pipeline().RunId}';\nDECLARE @stage  NVARCHAR(32)='core_to_mdl';\nDECLARE @d      DATE='@{pipeline().parameters.run_date}';\nDECLARE @rows   BIGINT=(SELECT COUNT(*) FROM mdl.fact_trip WHERE ingest_date=@d);\n\nUPDATE ops.run_log\n   SET status='SUCCEEDED', rows_copied=@rows, finished_at_utc=SYSUTCDATETIME()\n WHERE run_id=@run_id AND stage=@stage;\n\nIF NOT EXISTS (SELECT 1 FROM ops.run_log WHERE run_id=@run_id AND stage=@stage)\nINSERT INTO ops.run_log (run_id, stage, dataset, ingest_date, status, started_at_utc, finished_at_utc, rows_copied)\nSELECT @run_id, @stage, '@{pipeline().parameters.dataset}', @d, 'SUCCEEDED', SYSUTCDATETIME(), SYSUTCDATETIME(), @rows;\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "LogFailure",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "ModelDQ_Gate",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_syn_sql",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "DECLARE @run_id NVARCHAR(64)='@{pipeline().RunId}';\nDECLARE @stage  NVARCHAR(32)='core_to_mdl';\nDECLARE @d      DATE='@{pipeline().parameters.run_date}';\nDECLARE @rows   BIGINT=(SELECT COUNT(*) FROM mdl.fact_trip WHERE ingest_date=@d);\n\nUPDATE ops.run_log\n   SET status='FAILED', rows_copied=@rows, finished_at_utc=SYSUTCDATETIME()\n WHERE run_id=@run_id AND stage=@stage;\n\nIF NOT EXISTS (SELECT 1 FROM ops.run_log WHERE run_id=@run_id AND stage=@stage)\nINSERT INTO ops.run_log (run_id, stage, dataset, ingest_date, status, started_at_utc, finished_at_utc, rows_copied)\nSELECT @run_id, @stage, '@{pipeline().parameters.dataset}', @d, 'FAILED', SYSUTCDATETIME(), SYSUTCDATETIME(), @rows;\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"dataset": {
				"type": "string",
				"defaultValue": "nyctaxi_yellow"
			},
			"run_date": {
				"type": "string"
			}
		},
		"annotations": []
	}
}